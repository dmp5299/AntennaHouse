@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
    <link rel="stylesheet" type="text/css" href="~/JqTheme/jquery-ui.css" />
    <link href="~/Content/jquery.jqGrid/ui.jqgrid.css" rel="stylesheet" />
    <link rel="stylesheet" type="text/css" media="screen" href="http://trirand.com/blog/jqgrid/themes/ui.multiselect.css" />
    <link href="~/Content/bootstrap.min.css" rel="stylesheet" />
    <link href="~/Content/MyStyles.css" rel="stylesheet" />
    @using System.Windows;

    <script src="http://trirand.com/blog/jqgrid/js/jquery.js" type="text/javascript"></script>
    <script src="http://trirand.com/blog/jqgrid/js/jquery-ui-custom.min.js" type="text/javascript"></script>
    <script src="http://trirand.com/blog/jqgrid/js/jquery.layout.js" type="text/javascript"></script>
    <script src="http://trirand.com/blog/jqgrid/js/i18n/grid.locale-en.js" type="text/javascript"></script>
    <script src="http://trirand.com/blog/jqgrid/js/ui.multiselect.js" type="text/javascript"></script>
    <script src="http://trirand.com/blog/jqgrid/js/jquery.jqGrid.js" type="text/javascript"></script>
    <script src="http://trirand.com/blog/jqgrid/js/jquery.tablednd.js" type="text/javascript"></script>
    <script src="http://trirand.com/blog/jqgrid/js/jquery.contextmenu.js" type="text/javascript"></script>
    <script src="~/Scripts/bootstrap.min.js"></script>
    <script scr="~/Scripts/BuildChart.js"></script>
    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="https://code.highcharts.com/modules/exporting.js"></script>
    <script>
        $(function () {
            var pageWidth = $("#grid").parent().width() - 15;
            "use strict";
            var mydata = [
                        { id: "1", ExCol1: "test", ExCol2: "test", ExCol3: "test", ExCol4: "test" },
            ],
                onclickSubmitLocal = function (options, postdata) {
                    var $this = $(this), p = $this.jqGrid("getGridParam"),// p = this.p,
                        idname = p.prmNames.id,
                        id = $.jgrid.jqID(this.id),
                        idInPostdata = this.id + "_id",
                        rowid = postdata[idInPostdata],
                        addMode = rowid === "_empty",
                        oldValueOfSortColumn,
                        newId = rowid,
                        idOfTreeParentNode;

                    // postdata has row id property with another name. we fix it:
                    if (addMode) {
                        // generate new id
                        newId = $.jgrid.randId();
                        while ($("#" + $.jgrid.jqID(newId)).length !== 0) {
                            newId = $.jgrid.randId();
                        }
                    }
                    if (postdata[idname] === undefined) {
                        // set id property only if the property not exist
                        postdata[idname] = newId;
                    }
                    delete postdata[idInPostdata];

                    // prepare postdata for tree grid
                    if (p.treeGrid === true) {
                        if (addMode) {
                            idOfTreeParentNode = p.treeGridModel === "adjacency" ? p.treeReader.parent_id_field : "parent_id";
                            postdata[idOfTreeParentNode] = p.selrow;
                        }

                        $.each(p.treeReader, function () {
                            if (postdata.hasOwnProperty(this)) {
                                delete postdata[this];
                            }
                        });
                    }

                    // decode data if there encoded with autoencode
                    if (p.autoencode) {
                        $.each(postdata, function (n, v) {
                            postdata[n] = $.jgrid.htmlDecode(v); // TODO: some columns could be skipped
                        });
                    }

                    // save old value from the sorted column
                    oldValueOfSortColumn = p.sortname === "" ? undefined : $this.jqGrid("getCell", rowid, p.sortname);

                    // save the data in the grid
                    if (p.treeGrid === true) {
                        if (addMode) {
                            $this.jqGrid("addChildNode", newId, p.selrow, postdata);
                        } else {
                            $this.jqGrid("setTreeRow", rowid, postdata);
                        }
                    } else {
                        if (addMode) {
                            $this.jqGrid("addRowData", newId, postdata, options.addedrow);
                        } else {
                            $this.jqGrid("setRowData", rowid, postdata);
                        }
                    }

                    if ((addMode && options.closeAfterAdd) || (!addMode && options.closeAfterEdit)) {
                        // close the edit/add dialog
                        $.jgrid.hideModal("#editmod" + id, {
                            gb: "#gbox_" + id,
                            jqm: options.jqModal,
                            onClose: options.onClose
                        });
                    }

                    if (postdata[p.sortname] !== oldValueOfSortColumn) {
                        // if the data are changed in the column by which are currently sorted
                        // we need resort the grid
                        setTimeout(function () {
                            $this.trigger("reloadGrid", [{ current: true }]);
                        }, 100);
                    }

                    // !!! the most important step: skip ajax request to the server
                    options.processing = true;
                    return {};
                },
                editSettings = {
                    //recreateForm: true,
                    //jqModal: false,
                    checkOnUpdate: true,
                    reloadAfterSubmit: false,
                    closeOnEscape: true,
                    savekey: [true, 13],
                    closeAfterEdit: true,
                    onclickSubmit: onclickSubmitLocal
                },
                addSettings = {
                    //recreateForm: true,
                    //jqModal: false,
                    checkOnUpdate: true,
                    reloadAfterSubmit: false,
                    savekey: [true, 13],
                    closeOnEscape: true,
                    closeAfterAdd: true,
                    onclickSubmit: onclickSubmitLocal
                },
                delSettings = {
                    // because I use "local" data I don't want to send the changes to the server
                    // so I use "processing:true" setting and delete the row manually in onclickSubmit
                    onclickSubmit: function (options, rowid) {
                        var $this = $(this), id = $.jgrid.jqID(this.id), p = $this.jqGrid("getGridParam"), // p = this.p,
                            newPage = p.page;

                        // reset the value of processing option to true to
                        // skip the ajax request to "clientArray".
                        options.processing = true;

                        // delete the row
                        $this.jqGrid("delRowData", rowid);
                        if (p.treeGrid) {
                            $this.jqGrid("delTreeNode", rowid);
                        } else {
                            $this.jqGrid("delRowData", rowid);
                        }
                        $.jgrid.hideModal("#delmod" + id, {
                            gb: "#gbox_" + id,
                            jqm: options.jqModal,
                            onClose: options.onClose
                        });

                        if (p.lastpage > 1) {// on the multipage grid reload the grid
                            if (p.reccount === 0 && newPage === p.lastpage) {
                                // if after deliting there are no rows on the current page
                                // which is the last page of the grid
                                newPage--; // go to the previous page
                            }
                            // reload grid to make the row from the next page visable.
                            $this.trigger("reloadGrid", [{ page: newPage }]);
                        }

                        return true;
                    },
                    processing: true
                },
                initDateEdit = function (elem) {
                    setTimeout(function () {
                        $(elem).datepicker({
                            dateFormat: "dd-M-yy",
                            showOn: "button",
                            changeYear: true,
                            changeMonth: true,
                            showButtonPanel: true,
                            showWeek: true
                        });
                    }, 50);
                },
                initDateSearch = function (elem) {
                    setTimeout(function () {
                        $(elem).datepicker({
                            dateFormat: "dd-M-yy",
                            changeYear: true,
                            changeMonth: true,
                            showButtonPanel: true,
                            showWeek: true
                        });
                    }, 50);
                },
                removeTheOptionAll = function (elem) {
                    // We use "value" in the searchoption property of some columns of the colModel.
                    // The option {"": "All"} neams "No filter" and should be displayed only
                    // in the searching toolbar and not in the searching dialog.
                    // So we use dataInit:removeTheOptionAll inside of searchoptions to remove
                    // the option {"": "All"} in case of the searching dialog
                    if (elem != null && typeof elem.id === "string") {
                        if (elem.id.substr(0, 3) !== "gs_") {
                            // we are NOT in the searching bar
                            $(elem).find("option[value=\"\"]").remove(); // remove "All" option
                        }
                    }
                };

            $.extend(true, $.jgrid.edit, {
                onInitializeForm: function ($form) {
                    $form.css({ height: "auto" });
                    $form.closest(".ui-jqdialog").css({ height: "auto" });
                }
            });

            $("#list").jqGrid({
                datatype: "local",
                data: mydata,
                colNames: ['id', 'ExCol1', 'ExCol2', 'ExCol3', 'ExCol4'],
                colModel: [
                    { key: false, hidden: true, name: 'id', index: 'id', editable: false, width: 0 },
                    { key: false, hidden: false, name: 'ExCol1', index: 'ExCol1', editable: true, width: 0 },
                    { key: false, hidden: false, name: 'ExCol2', index: 'ExCol2', editable: true, width: 0 },
                    { key: false, search: false, name: 'ExCol3', index: 'ExCol3', editable: true, width: (pageWidth * (10 / 100)) },
                    { key: false, search: false, name: 'ExCol4', index: 'ExCol4', editable: true, width: (pageWidth * (10 / 100)) },
                ],
                cmTemplate: { editable: true, searchoptions: { clearSearch: false } },
                rowNum: 10,
                rowList: [5, 10, 20],
                pager: "#pager",
                gridview: true,
                rownumbers: true,
                autoencode: true,
                ignoreCase: true,
                sortname: "invdate",
                viewrecords: true,
                sortorder: "desc",
                caption: "Xml Data Entry",
                height: "100%",
                editurl: "clientArray",
                autowidth: true,
                shrinkToFit: true,
                ondblClickRow: function (rowid) {
                    var $this = $(this), selRowId = $this.jqGrid("getGridParam", "selrow");
                    if (selRowId !== rowid) {
                        // prevent the row from be unselected on double-click
                        // the implementation is for "multiselect:false" which we use,
                        // but one can easy modify the code for "multiselect:true"
                        $this.jqGrid("setSelection", rowid);
                    }
                    $this.jqGrid("editGridRow", rowid, editSettings);
                }
            }).jqGrid("navGrid", "#pager", {}, editSettings, addSettings, delSettings, {
                multipleSearch: true,
                overlay: false,
                onClose: function () {
                    // if we close the search dialog during the datapicker are opened
                    // the datepicker will stay opened. To fix this we have to hide
                    // the div used by datepicker
                    $("div#ui-datepicker-div.ui-datepicker").hide();
                }
            })/*.jqGrid("filterToolbar", { defaultSearch: "cn" })*/;
            $(window).bind("resize", function () {
                $("#jqGrid").jqGrid("setGridWidth", $("#jqGrid").closest("#grid").width());
            }).triggerHandler("resize");
            $("#submitData").click(function () {
                var allJQGridData = $('#list').jqGrid('getGridParam', 'data');
                var params = JSON.stringify(allJQGridData, function (key, val) {
                    if (key !== "_id_")
                        return val;
                });
                $.ajax({
                    type: "POST",
                    url: "/XmlGenerator/XmlData", data: { gridData: params }, success: function (result) {
                        $("#xmlResult").val(result);
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        alert("Status: " + textStatus); alert("Error: " + errorThrown);
                    }
                });
            });
        });
    </script>
    <script scr="~/Scripts/dropdownLogic.js"></script>
    <style>
    </style>
</head>
<body>
    <div class="panel panel-success">
        <div class="panel-body">
            <div style="text-align:center;padding-bottom:10px">
                <image src="~/images/RCMTLogo.jpg" height="160px" width="600px" />
            </div>
            <nav class="navbar navbar-default" style="background-color:blue">
                <div class="container-fluid">
                    <ul class="nav navbar-nav" style="width:100%">
                        <li><a href="/Home/Index" style="color:white">Home</a></li>
                        <li><a href="/PdfBuilder/Index" style="color:white">PdfBuilder</a></li>
                        <li><a href="/XmlGenerator/Index" style="color:white">XmlGeneration</a></li>
                        <li style="float:right"><a href="/Home/Logout" style="color:white">Logout</a></li>
                    </ul>
                </div>
            </nav>
            <div id="grid" style="padding:10px;width:100%">
                <table id="list"><tr><td></td></tr></table>
                <div id="pager"></div>
                <input id="submitData" class="btn btn-primary" type="submit" style="margin:0px auto; display:block;margin-top:20px" value="Submit" />
            </div>
            <div id="xml" style="text-align:center">
                <textarea rows="15" cols="250" id="xmlResult"></textarea>
            </div>
        </div>
    </div>
</body>
</html>